{"version":3,"sources":["jquery-asTree.es.js"],"names":["global","factory","define","amd","exports","require","mod","jQuery","jqueryAsTreeEs","this","_jquery","_classCallCheck","instance","Constructor","TypeError","_jquery2","obj","__esModule","default","_interopRequireDefault","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_typeof","Symbol","iterator","constructor","DEFAULTS","namespace","autoOpen","dataFromHtml","data","multiSelect","canUnselect","tpl","toggler","node","branch","content","branchContent","name","leaf","leafContent","DataParser","options","value","getTree","children","getBranch","getLeaf","isRoot","output","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","getNode","err","return","Node","$dom","api","type","selected","hasChildren","opened","isOpened","init","_children","get","level","parent","$parent","childrenUl","parents","eq","postions","_iterate","push","index","reverse","$","siblings","$siblings","is","iterate","addClass","open","hasChildrenSelect","removeClass","close","find","$element","unselect","select","hasChildrenSelectBranch","force","_this","grep","html","toBranch","dataParser","$node","appendTo","attach","prependTo","after","before","prev","remove","HtmlParser","_this2","$children","$tree","each","replaceWith","renderTree","asTree","element","arguments","extend","htmlParser","_init","_createFromHtml","_createFromData","$root","nodeName","toLowerCase","root","on","click","proxy","_click","_trigger","eventType","_len","params","Array","_key","concat","trigger","NAMESPACE$1","onFunction","replace","word","substring","toUpperCase","apply","e","$target","closest","attr","toggleOpen","toggleSelect","_this3","position","isArray","_node","_this4","item","append"],"mappings":"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","file":"jquery-asTree.min.js","sourcesContent":["/**\n* jQuery asTree v0.3.2\n* https://github.com/amazingSurge/jquery-asTree\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nimport $$1 from 'jquery';\n\n/*eslint no-unused-vars: \"off\"*/\n\nvar DEFAULTS = {\n  namespace: 'tree',\n  autoOpen: [1, 2], //true/false/1/2...\n  // keyboard: false, // Support keyboard navigation.\n  dataFromHtml: false,\n  data: null,\n  multiSelect: false,\n  canUnselect: true,\n\n  tpl: {\n    toggler(node) {\n      return '<i class=\"tree-toggler\"></i>';\n    },\n    branch(node) {\n      const content = this.branchContent(node);\n      const toggler = this.toggler(node);\n      return `<div class=\"tree-element\">${toggler}<div class=\"element-content\">${content}</div></div>`;\n    },\n    branchContent(node) {\n      if (typeof(node) === 'object') {\n        return node.name;\n      }\n      return node;\n    },\n    leaf(node) {\n      const content = this.leafContent(node);\n\n      return content;\n    },\n    leafContent(node) {\n      if (typeof node === 'object') {\n        return node.name;\n      }\n      return node;\n    }\n  }\n};\n\nclass DataParser {\n  constructor(options) {\n    this.tpl = options.tpl;\n  }\n\n  getLeaf(data) {\n    const content = this.tpl.leaf(data);\n\n    return `<li>${content}</li>`;\n  }\n\n  getBranch(data) {\n    const content = this.tpl.branch(data);\n    const children = this.getTree(data.children);\n\n    return `<li class=\"tree-branch\">${content}${children}</li>`;\n  }\n\n  getNode(data) {\n    if (data.children) {\n      return this.getBranch(data);\n    }\n    return this.getLeaf(data);\n  }\n\n  getTree(data, isRoot) {\n    let output = '';\n    for (const node of data) {\n      output += this.getNode(node);\n    }\n    if (isRoot) {\n      return `<ul class=\"tree\">${output}</ul>`;\n    }\n    return `<ul>${output}</ul>`;\n  }\n}\n\nclass Node {\n  constructor($dom, isRoot, api) {\n    this.$dom = $dom;\n    this.api = api;\n\n    if (isRoot === null) {\n      isRoot = false;\n    }\n\n    if (isRoot) {\n      this.type = 'root';\n    } else {\n      this.selected = false;\n      if (this.hasChildren()) {\n        this.type = 'branch';\n        this.opened = this.isOpened();\n      } else {\n        this.type = 'leaf';\n      }\n    }\n    this.init();\n\n  }\n\n  init() {\n    switch (this.type) {\n      case 'root': {\n        this._children = this.$dom.get(0).children;\n        this.level = 0;\n        this.parent = null;\n        this.$parent = null;\n        break;\n      }\n      case 'branch':\n      case 'leaf': {\n        const childrenUl = this.$dom.children('ul');\n        if (childrenUl.length > 0) {\n          this._children = childrenUl.get(0).children;\n        } else {\n          this._children = [];\n        }\n\n        this.$parent = this.$dom.parents('li.tree-branch').eq(0);\n\n        if (this.$parent.length === 0) {\n          this.$parent = this.$dom.parent();\n        }\n\n        this.parent = this.$parent.data('node');\n        this.level = this.parent.level + 1;\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  // Retrieve the DOM elements matched by the Node object.\n  get() {\n    return this.$dom;\n  }\n\n  position() {\n    const postions = [];\n\n    const _iterate = node => {\n      postions.push(node.$dom.index() + 1);\n      if (node.parent && node.parent.type !== 'root') {\n        _iterate(node.parent);\n      }\n    };\n    _iterate(this);\n\n    return postions.reverse();\n  }\n\n  parents() {\n    const parents = [];\n\n    const _iterate = node => {\n      if (node.parent !== null) {\n        parents.push(node.parent);\n        _iterate(node.parent);\n      }\n    };\n    _iterate(this);\n    return parents;\n  }\n\n  children() {\n    const children = [];\n    let node;\n    for (let i = 0; i < this._children.length; i++) {\n      node = $(this._children[i]).data('node');\n      if (node) {\n        children.push(node);\n      }\n    }\n\n    return children;\n  }\n\n  siblings() {\n    const siblings = [];\n    const $siblings = this.$dom.siblings();\n    let node;\n\n    for (let i = 0; i < $siblings.length; i++) {\n      node = $siblings.data('node');\n      if (node) {\n        siblings.push(node);\n      }\n    }\n    return siblings;\n  }\n\n  hasChildren() {\n    return this.$dom.children('ul').children('li').length !== 0;\n  }\n\n  isOpened() {\n    if (typeof this.opened === 'undefined') {\n      return this.$dom.is('.tree_open');\n    }\n    return this.opened;\n  }\n\n  open(iterate) {\n    this.opened = true;\n    this.$dom.addClass('tree_open');\n\n    // open parents nodes\n    if (iterate) {\n      const parents = this.parents();\n      for (let i = 0; i < parents.length; i++) {\n        if (parents[i].type !== 'root') {\n          parents[i].open();\n        }\n      }\n    }\n\n    if (!this.api.options.multiSelect && this.hasChildrenSelect()) {\n      this.$dom.removeClass('tree_childrenSelected');\n    }\n\n    return this;\n  }\n\n  close(iterate) {\n    this.opened = false;\n    this.$dom.removeClass('tree_open');\n\n    // close children nodes\n    if (iterate) {\n      const children = this.children();\n      for (let i = 0; i < children.length; i++) {\n        if (children[i].type === 'branch') {\n          children[i].close(true);\n        }\n      }\n    }\n\n    if (!this.api.options.multiSelect && this.hasChildrenSelect()) {\n      this.$dom.addClass('tree_childrenSelected');\n    }\n\n    return this;\n  }\n\n  hasChildrenSelect() {\n    return this.$dom.find('li.tree_selected').length !== 0;\n  }\n\n  hasChildrenSelectBranch() {\n    return this.api.$element.find('li.tree_childrenSelected').length !== 0;\n  }\n\n  toggleOpen() {\n    if (this.opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n    return this;\n  }\n\n  toggleSelect() {\n    if (this.selected) {\n      this.unselect();\n    } else {\n      this.select();\n    }\n\n    return this;\n  }\n\n  select() {\n    this.selected = true;\n    this.$dom.addClass('tree_selected');\n    if (this.api.options.multiSelect) {\n      this.api.selected.push(this);\n    } else {\n      if (this.api.selected) {\n        this.api.selected.unselect(true);\n      }\n      this.api.selected = this;\n    }\n\n    if (!this.api.options.multiSelect && this.hasChildrenSelectBranch()) {\n      this.api.$element.find('li.tree_childrenSelected').removeClass('tree_childrenSelected');\n    }\n\n    return this;\n  }\n\n  unselect(force) {\n    if (this.api.options.canUnselect || force) {\n      this.selected = false;\n      this.$dom.removeClass('tree_selected');\n\n      if (this.api.options.multiSelect) {\n        this.api.selected = $.grep(this.api.selected, node => node.$dom !== this.$dom);\n      } else {\n        this.api.selected = null;\n      }\n    }\n    return this;\n  }\n\n  toBranch() {\n    if (this.type === 'leaf') {\n      const content = this.$dom.html();\n      this.$dom.addClass('tree-branch');\n      this.$dom.html(`${this.api.options.tpl.branch(content)}<ul></ul>`);\n    }\n    return this;\n  }\n\n  append(data) {\n    if (this.type === 'leaf') {\n      this.toBranch();\n    }\n\n    const html = this.api.dataParser.getNode(data);\n    const $node = $(html).appendTo(this.$dom.children('ul'));\n\n    if (this.type === 'leaf') {\n      this.api.attach(this.$dom, false, this.api);\n    } else {\n      this.api.attach($node, false, this.api);\n    }\n\n    return this;\n  }\n\n  prepend(data) {\n    if (this.type === 'leaf') {\n      this.toBranch();\n    }\n\n    const html = this.api.dataParser.getNode(data);\n    const $node = $(html).prependTo(this.$dom.children('ul'));\n\n    if (this.type === 'leaf') {\n      this.api.attach(this.$dom, false, this.api);\n    } else {\n      this.api.attach($node, false, this.api);\n    }\n\n    return this;\n  }\n\n  after(data) {\n    const html = this.api.dataParser.getNode(data);\n    this.$dom.after(html);\n\n    const $node = this.$dom.next();\n    this.api.attach($node, false, this.api);\n    return this;\n  }\n\n  before(data) {\n    const html = this.api.dataParser.getNode(data);\n    this.$dom.before(html);\n\n    const $node = this.$dom.prev();\n    this.api.attach($node, false, this.api);\n    return this;\n  }\n\n  remove() {\n    this.$dom.remove();\n\n    return this;\n  }\n}\n\nclass HtmlParser {\n  constructor(options) {\n    this.tpl = options.tpl;\n  }\n\n  getLeaf($node) {\n    return $node.html();\n  }\n\n  getBranch($node) {\n    return $node.children('div').html();\n  }\n\n  renderTree($node, isRoot, api) {\n    let $children;\n\n    if (isRoot) {\n      $children = $node;\n      $node.addClass('tree');\n    } else {\n      $children = $node.children('ul');\n    }\n\n    if ($children.length !== 0) { // has child\n      $node.addClass('tree-branch');\n\n      const _iterate = $tree => {\n        $tree.children('li').each((i, node) => {\n          const $node = $(node);\n          const html = this.tpl.branch(this.getBranch($node));\n\n          $node.children('div').replaceWith(html);\n\n          this.renderTree($node, false, api);\n        });\n      };\n      _iterate($children);\n    }\n  }\n}\n\nconst NAMESPACE$1 = 'asTree';\n\n/**\n * Plugin constructor\n **/\nclass asTree {\n  constructor(element, options = {}) {\n    this.$element = $$1(element);\n    this.options = $$1.extend(true, {}, DEFAULTS, options);\n    this.namespace = this.options.namespace;\n    this.dataParser = new DataParser(this.options);\n    this.htmlParser = new HtmlParser(this.options);\n\n    this._init();\n  }\n\n  _init() {\n    if (this.options.dataFromHtml === true) {\n      this._createFromHtml();\n    } else {\n      this._createFromData();\n    }\n\n    const $root = (this.$element[0].nodeName.toLowerCase() === 'ul' ? this.$element : this.$element.find('ul:first'));\n    this.root = $root.data('node');\n\n    if (this.options.multiSelect) {\n      this.selected = [];\n    } else {\n      this.selected = null;\n    }\n\n    this.autoOpen();\n\n    // Bind events\n    this.$element.on({\n      click: $$1.proxy(this._click, this)\n    });\n\n    this._trigger('ready');\n  }\n\n  _trigger(eventType, ...params) {\n    let data = [this].concat(params);\n\n    // event\n    this.$element.trigger(`${NAMESPACE$1}::${eventType}`, data);\n\n    // callback\n    eventType = eventType.replace(/\\b\\w+\\b/g, (word) => {\n      return word.substring(0, 1).toUpperCase() + word.substring(1);\n    });\n    let onFunction = `on${eventType}`;\n\n    if (typeof this.options[onFunction] === 'function') {\n      this.options[onFunction].apply(this, params);\n    }\n  }\n\n  _createFromHtml() {\n    const $tree = (this.$element[0].nodeName.toLowerCase() === 'ul' ? this.$element : this.$element.find('ul:first'));\n\n    this.htmlParser.renderTree($tree, true, this);\n    this.attach($tree, true, this);\n  }\n\n  _createFromData() {\n    let html = '';\n    if (this.options.data) {\n      html = this.dataParser.getTree(this.options.data, true);\n    }\n    this.$element.html(html);\n    this.attach(this.$element.children('ul'), true, this);\n  }\n\n  _click(e) {\n    const $target = $$1(e.target).closest('.tree-toggler, li');\n    const $node = $$1(e.target).closest('li');\n    const node = $node.data('node');\n\n    switch ($target.attr('class')) {\n      case 'tree-toggler':\n        node.toggleOpen();\n        break;\n      default:\n        node.toggleSelect();\n        break;\n    }\n  }\n\n  attach($node, isRoot, api) {\n    $node.data('node', new Node($node, isRoot, api));\n\n    let $children;\n    if (isRoot) {\n      $children = $node;\n    } else {\n      $children = $node.children('ul');\n    }\n\n    if ($children.length !== 0) { // has child\n      const _iterate = $tree => {\n        $tree.children('li').each((i, node) => {\n          const $node = $$1(node);\n          this.attach($node, false, api);\n        });\n      };\n      _iterate($children);\n    }\n  }\n\n  open(position, iterate) {\n    const node = this.get(position);\n    if (node) {\n      node.open(iterate);\n    }\n    return this;\n  }\n\n  close(position, iterate) {\n    const node = this.get(position);\n    if (node) {\n      node.close(iterate);\n    }\n    return this;\n  }\n\n  select(position) {\n    const node = this.get(position);\n    if (node) {\n      node.select();\n    }\n    return this;\n  }\n\n  unselect(position) {\n    const node = this.get(position);\n    if (node) {\n      node.unselect();\n    }\n    return this;\n  }\n\n  get(position) {\n    if (!$$1.isArray(position)) {\n      position = [];\n    }\n\n    try {\n      const _iterate = (_node, index) => $$1(_node._children[index]).data('node');\n\n      let node = this.root;\n      for (let i = 0; i < position.length; i++) {\n        node = _iterate(node, position[i] - 1);\n      }\n      return node;\n\n    } catch (e) {\n      return null;\n    }\n  }\n\n  getRoot() {\n    return this.root;\n  }\n\n  getSelected() {\n    return this.selected;\n  }\n\n  autoOpen() {\n    const $root = this.root.$dom;\n\n    switch (typeof this.options.autoOpen) {\n      case 'boolean': {\n        $root.find('li').each((i, item) => {\n          const $node = $$1(item);\n          const node = $node.data('node');\n          if (this.options.autoOpen === true && node.type === 'branch') {\n            node.open();\n          }\n        });\n        break;\n      }\n      case 'number': {\n        $root.find('li').each((i, item) => {\n          const $node = $$1(item);\n          const node = $node.data('node');\n          if (node.type === 'branch' && node.level <= this.options.autoOpen) {\n            node.open();\n          }\n        });\n        break;\n      }\n      case 'object': {\n        if ($$1.isArray(this.options.autoOpen)) {\n          this.get(this.options.autoOpen).open(true);\n        }\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  append(position, data) {\n    const node = this.get(position);\n    if (node) {\n      node.append(data);\n    }\n    return this;\n  }\n\n  prepend(position, data) {\n    const node = this.get(position);\n    if (node) {\n      node.prepend(data);\n    }\n    return this;\n  }\n\n  after(position, data) {\n    const node = this.get(position);\n    if (node) {\n      node.after(data);\n    }\n    return this;\n  }\n\n  before(position, data) {\n    const node = this.get(position);\n    if (node) {\n      node.before(data);\n    }\n    return this;\n  }\n\n  remove(position) {\n    const node = this.get(position);\n    if (node) {\n      node.remove();\n    }\n    return this;\n  }\n\n  static setDefaults(options) {\n    $$1.extend(true, DEFAULTS, $$1.isPlainObject(options) && options);\n  }\n}\n\nvar info = {\n  version:'0.3.2'\n};\n\nconst NAMESPACE = 'asTree';\nconst OtherAsTree = $$1.fn.asTree;\n\nconst jQueryAsTree = function(options, ...args) {\n  if (typeof options === 'string') {\n    const method = options;\n\n    if (/^_/.test(method)) {\n      return false;\n    } else if ((/^(get)/.test(method))) {\n      const instance = this.first().data(NAMESPACE);\n      if (instance && typeof instance[method] === 'function') {\n        return instance[method](...args);\n      }\n    } else {\n      return this.each(function() {\n        const instance = $$1.data(this, NAMESPACE);\n        if (instance && typeof instance[method] === 'function') {\n          instance[method](...args);\n        }\n      });\n    }\n  }\n\n  return this.each(function() {\n    if (!$$1(this).data(NAMESPACE)) {\n      $$1(this).data(NAMESPACE, new asTree(this, options));\n    }\n  });\n};\n\n$$1.fn.asTree = jQueryAsTree;\n\n$$1.asTree = $$1.extend({\n  setDefaults: asTree.setDefaults,\n  noConflict: function() {\n    $$1.fn.asTree = OtherAsTree;\n    return jQueryAsTree;\n  }\n}, info);\n"]}